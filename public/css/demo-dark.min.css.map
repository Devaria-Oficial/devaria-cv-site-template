{"version":3,"sources":["demo-dark.scss","_mixins.scss","../vendors/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAyBA,K,CAAA,e,CAEE,0C,CACA,wB,CACA,iB,CAEF,K,CC7BI,c,CACA,S,CAEA,Y,CAEA,U,CD0BF,W,CACA,iB,CC0BE,kB,CACA,0B,CACA,sB,CACA,uB,CD3BF,6B,CEuDE,kDF5DJ,K,CAOI,Q,CACA,mB,CACE,gB,CACA,iBAGJ,Y,CACE,O,CAEF,Q,CACE,c,CACA,e,CC3BI,4B,CD6BJ,a,CACA,gB,CACA,gB,CACA,W,CACA,kB,CAEF,e,CCvDE,iB,CACA,K,CACA,U,CDuDA,c,CACA,iB,CACA,a,CACA,U,CACA,W,CACA,0B,CACA,6B,CAEF,Y,CACE,kB,CAEF,iB,CAAA,Y,CACE,oB,CACA,U,CACA,W,CACA,U,CAEF,iB,CACE,2B,CAEF,mB,CACE,Y,CACA,kB,CACA,sB,CACA,qB,CACE,W,CACA,kB,CACA,a,CACA,U,CACA,W,CAIF,wC,CACE,iB,CACA,qB,CACA,U,CACA,e,CACA,gB,CACA,Y,CACA,kB,CACA,6B,CACA,iB,CAEF,sC,CACE,S,CACA,U,CACA,iB,CACA,gB,CACA,e,CACA,wB,CACA,yC,CACE,4B,CACA,iB,CACA,oD,CACE,e,CAGJ,qD,CACE,e,CACA,a,CACA,2D,CAAA,2D,CACE,wB","file":"demo-dark.min.css","sourcesContent":["/*\r\nTemplate Name: Mono CV - Portfolio & Resume Template\r\nAuthor: Lettstart Design\r\nVersion: 1.0.0\r\nWebsite: https://lettstartdesign.com/\r\nFile: Bootstrap File\r\n\r\n====== TABLES OF CSS =======\r\n1. Bootstrap functions\r\n2. Bootstrap variables\r\n3. Bootstrap mixins\r\n4. App variables\r\n5. App mixins\r\n6. App functions\r\n7. Demo CSS | Dark\r\n*/\r\n\r\n//bootstrap utils\r\n@import '../vendors/bootstrap/scss/functions';\r\n@import '../vendors/bootstrap/scss/variables';\r\n@import '../vendors/bootstrap/scss/mixins';\r\n//app utils\r\n@import 'variables-dark';\r\n@import 'mixins';\r\n@import 'functions';\r\n.demo,\r\n.demo .settings {\r\n  box-shadow: $box-shadow;\r\n  background-color: $setting-bg;\r\n  text-align: center;\r\n}\r\n.demo {\r\n  @include position(fixed, 160px, -200px, null, null, 10);\r\n  width: 200px;\r\n  padding: 10px 15px;\r\n  @include transition(all 0.3s);\r\n  border-bottom-left-radius: 8px;\r\n  @include media-breakpoint-between(sm, md){\r\n    top: 50px;\r\n    .demo-content {\r\n      max-height: 250px;\r\n      overflow-y: auto;\r\n    }\r\n  }\r\n  &.active {\r\n    right: 0;\r\n  }\r\n  h5 {\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    @include border(bottom, 1px, solid, $border-color);\r\n    color: $default;\r\n    letter-spacing: 0;\r\n    line-height: 33px;\r\n    height: 40px;\r\n    margin-bottom: 12px;\r\n  }\r\n  .settings {\r\n    @include position(absolute, 0, null, null, -50px);\r\n    padding: 15px 0;\r\n    font-size: px-rem-converter(20px);\r\n    line-height: 1;\r\n    width: 50px;\r\n    height: 50px;\r\n    border-top-left-radius: 8px;\r\n    border-bottom-left-radius: 8px;\r\n  }\r\n  .reset {\r\n    margin-bottom: 13px;\r\n  }\r\n  .background, .color {\r\n    display: inline-block;\r\n    width: 20px;\r\n    height: 20px;\r\n    margin: 6px;\r\n  }\r\n  .background {\r\n    background-repeat: no-repeat;\r\n  }\r\n  .change-theme {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    & > a {\r\n      padding: 8px;\r\n      border-radius: 100%;\r\n      line-height: 1;\r\n      width: 36px;\r\n      height: 36px;\r\n    }\r\n  }\r\n  .setting-dropdown {\r\n    .dropdown-toggle {\r\n      border-radius: 4px;\r\n      border: 1px solid $border-color;\r\n      width: 100%;\r\n      padding: 4px 8px;\r\n      line-height: 1.75;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      font-size: px-rem-converter(14px);\r\n    }\r\n    .dropdown-menu {\r\n      padding: 0;\r\n      width: 100%;\r\n      border-color: $border-color;\r\n      max-height: 200px;\r\n      overflow-y: auto;\r\n      background-color: $light;\r\n      li {\r\n        border-bottom: 1px solid $border-color;\r\n        font-size: px-rem-converter(14px);\r\n        &:last-child {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n      .dropdown-item {\r\n        padding: 4px 8px;\r\n        color: $default;\r\n        &:hover, &:focus {\r\n          background-color: $dark;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","// set position through css params\r\n@mixin position($pos, $top:null, $right:null, $bottom:null, $left:null, $index:null) {\r\n    position: $pos;\r\n    top: $top;\r\n    left: $left;\r\n    right: $right;\r\n    bottom: $bottom;\r\n    z-index: $index\r\n}\r\n\r\n// set borders through css params\r\n@mixin border($direction, $width, $style, $color) {\r\n    @if($direction==left) {\r\n        border-left: $width $style $color;\r\n    }\r\n    @else if($direction==right) {\r\n        border-right: $width $style $color;\r\n    }\r\n    @else if($direction==top) {\r\n        border-top: $width $style $color;\r\n    }\r\n    @else if($direction==bottom) {\r\n        border-bottom: $width $style $color;\r\n    }\r\n    @else {\r\n        border: $width $style $color;\r\n    }\r\n}\r\n\r\n// display flex default mixin\r\n@mixin display-flex {\r\n    display: flex;\r\n    -webkit-display: flex;\r\n}\r\n\r\n// set align text through css params\r\n@mixin text-align($param) {\r\n    text-align: $param\r\n}\r\n\r\n// set font weights through css params\r\n@mixin font-weight($weight) {\r\n    font-weight: $weight;\r\n}\r\n\r\n// set text-transform through css params\r\n@mixin text-transform($fontCase) {\r\n    text-transform: $fontCase;\r\n}\r\n\r\n// set transform properties through css params\r\n@mixin transform($property) {\r\n    transform: $property;\r\n    -webkit-transform: $property;\r\n    -ms-transform: $property;\r\n    -moz-transform: $property;\r\n}\r\n\r\n// set transitions through css params\r\n@mixin transition($val) {\r\n    transition: $val;\r\n    -webkit-transition: $val;\r\n    -ms-transition: $val;\r\n    -moz-transition: $val;\r\n}\r\n\r\n// set keyframes properties of css through params\r\n@mixin keyframes($animationName, $animationDuration) {\r\n    animation-name: $animationName;\r\n    -webkit-animation-name: $animationName;\r\n    animation-duration: $animationDuration;\r\n    -webkit-animation-duration: $animationDuration;\r\n    animation-fill-mode: both;\r\n    -webkit-animation-fill-mode: both;\r\n}\r\n\r\n// set calc using css properties\r\n@mixin setcalcproperty($type, $totalWidth, $width) {\r\n    #{$type}:calc(#{$totalWidth} - #{$width});\r\n}\r\n\r\n// set border radius through css params\r\n@mixin border-radius($radius) {\r\n    border-radius: $radius;\r\n}\r\n\r\n@mixin perspective($val) {\r\n    -webkit-perspective: $val;\r\n    -moz-perspective: $val;\r\n    -ms-perspective: $val;\r\n    perspective: $val;\r\n}\r\n\r\n\r\n@mixin backface-visibility($val) {\r\n    -webkit-backface-visibility: $val;\r\n    backface-visibility: $val;\r\n}\r\n\r\n@mixin gred{\r\n    background: $gred-overlay;\r\n}\r\n\r\n@mixin text-gred{\r\n    background-image:  $gred-overlay;\r\n    -webkit-text-fill-color: transparent;\r\n    -webkit-background-clip: text;\r\n}\r\n\r\n@mixin  d-flex {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n//fackback mixin for border-radius\r\n@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {\r\n    @if $enable-rounded {\r\n      border-radius: $radius;\r\n    }\r\n    @else if $fallback-border-radius != false {\r\n      border-radius: $fallback-border-radius;\r\n    }\r\n}\r\n\r\n@mixin box-shadow ($shadow: $box-shadow){\r\n    box-shadow: $shadow;\r\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}